kind: job
metadata:
  name: question-answering
  tag: ''
  hash: 21d47c5447a7efe701317fe51b068dddd01ecb11
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: 
    base_image: mlrun/mlrun
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements:
    - transformers torch tqdm
  entry_points:
    open_mpi_handler:
      name: open_mpi_handler
      doc: ''
      parameters:
      - name: worker_inputs
        type: List[str]
        default: ''
      - name: root_worker_inputs
        type: Dict[str, Any]
        default: null
      outputs:
      - default: ''
      lineno: 57
    decorator:
      name: decorator
      doc: ''
      parameters:
      - name: handler
        default: ''
      outputs:
      - default: ''
      lineno: 65
    wrapper:
      name: wrapper
      doc: ''
      parameters: []
      outputs:
      - default: ''
      lineno: 70
    answer_questions:
      name: answer_questions
      doc: 'Answer questions with a context to the given text files contents by a
        pretrained LLM model. Each text file will have

        the following prompt built:


        start of `text_wrapper`

        <text file content>

        end of `text_wrapper`


        start of `questions_wrapper`

        1. <questions[0]>

        2. <questions[1]>

        ...

        n. <questions[n-1]>

        end of `questions_wrapper`'
      parameters:
      - name: data_path
        type: Union[str, List[str]]
        doc: A path to a directory of text files or a path to a text file to ask questions
          about.
        default: ''
      - name: model_name
        type: str
        doc: The pre-trained model name from the huggingface hub to use for asking
          questions.
        default: ''
      - name: questions
        type: Union[List[str], List[List[str]]]
        doc: The questions to ask.
        default: ''
      - name: device_map
        type: Union[str, dict]
        doc: A map to use for loading the model on multiple devices.
        default: null
      - name: model_kwargs
        type: dict
        doc: Keyword arguments to pass for loading the model using HuggingFace's `transformers.AutoModelForCausalLM.from_pretrained`
          function.
        default: null
      - name: auto_gptq_exllama_max_input_length
        type: int
        doc: For AutoGPTQ models to set and extend the model's input buffer size.
        default: null
      - name: tokenizer_name
        type: str
        doc: The tokenizer name from the huggingface hub to use. If not given, the
          model name will be used.
        default: null
      - name: tokenizer_kwargs
        type: dict
        doc: Keyword arguments to pass for loading the tokenizer using HuggingFace's
          `transformers.AutoTokenizer.from_pretrained` function.
        default: null
      - name: text_wrapper
        type: Union[str, List[str]]
        doc: A wrapper for the file's text. Will be added at the start of the prompt.
          Must have a placeholder ('{}') for the text of the file.
        default: ''
      - name: questions_wrapper
        type: Union[str, List[str]]
        doc: A wrapper for the questions received. Will be added after the text wrapper
          in the prompt template. Must have a placeholder ('{}') for the questions.
        default: ''
      - name: generation_config
        type: Union[Dict, List[Dict]]
        doc: HuggingFace's `GenerationConfig` keyword arguments to pass to the `generate`
          method.
        default: null
      - name: questions_config
        type: Union[Dict, List[Dict]]
        doc: A dictionary or list of dictionaries containing specific ways to answer
          questions (using a poll for example).
        default: null
      - name: batch_size
        type: int
        doc: Batch size for inference.
        default: 1
      - name: questions_columns
        type: List[str]
        doc: Columns to use for the dataframe returned.
        default: null
      - name: verbose
        type: bool
        doc: 'Whether to present logs of a progress bar and errors. Default: True.'
        default: false
      outputs:
      - default: ''
        doc: 'A tuple of:'
      lineno: 129
    handle_questions:
      name: handle_questions
      doc: Answer questions with a context to the given text files contents by a pretrained
        LLM model in given pipeline.
      parameters:
      - name: self
        default: ''
      - name: questions_amount
        type: int
        default: ''
      - name: batched_input
        type: List[str]
        default: ''
      - name: generation_pipeline
        type: Pipeline
        default: ''
      - name: generation_config
        type: GenerationConfig
        default: ''
      outputs:
      - default: ''
      lineno: 625
  description: GenAI approach of question answering on a given data
  default_handler: answer_questions
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
