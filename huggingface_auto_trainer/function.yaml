kind: job
metadata:
  name: huggingface-auto-trainer
  tag: ''
  hash: c1f93ee094c69aba9a22c4e919939f451904148b
  project: ''
  labels:
    author: Zeevr
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/ZeevRispler/functions.git#4ef6bf0c63ff8d61e388ad1538d63e016d2625d6:/Users/Zeev_Rispler/PycharmProjects/functions/huggingface_auto_trainer/huggingface_auto_trainer.py
    origin_filename: /Users/Zeev_Rispler/PycharmProjects/functions/huggingface_auto_trainer/huggingface_auto_trainer.py
    requirements: []
  entry_points:
    finetune_llm:
      name: finetune_llm
      doc: "Fine-tunes a Language Model (LLM) on a specific task using the provided\
        \ dataset.\n The function takes various configuration parameters to customize\
        \ the training process\n and adapt the model to specific tasks using a provided\
        \ dataset."
      parameters:
      - name: context
        type: MLClientCtx
        doc: mlrun context in order to log trained model
        default: ''
      - name: train_dataset
        type: str
        doc: The train dataset used for fine-tuning the language model.
        default: ''
      - name: eval_dataset
        type: str
        doc: The eval dataset used for evaluate the language model during training.
        default: null
      - name: train_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: eval_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: dataset_columns_to_train
        type: Union[str, list]
        doc: which columns to pass to the model as inputs
        default: text
      - name: model
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing model name and class, or str with model name or path
        default: huggingface-model
      - name: tokenizer
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing tokenizer name and class, or str with tokenizer name
          or path
        default: null
      - name: deepspeed_config
        type: Union[dict, bool]
        doc: Configuration options for DeepSpeed (optional).
        default: false
      - name: quantization_config
        type: Union[dict, bool]
        doc: Configuration options for model quantization (optional).
        default: false
      - name: lora_config
        type: Union[dict, bool]
        doc: Configuration options for Low-Rank Approximation (LoRA) (optional).
        default: false
      - name: training_config
        type: dict
        doc: Configuration options specific to the fine-tuning training process (optional).
        default: {}
      - name: model_pretrained_config
        type: dict
        doc: config to load the pretrained model
        default: {}
      - name: tokenizer_pretrained_config
        type: dict
        doc: config to load the pretrained tokenizer
        default: {}
      - name: data_collator_config
        type: dict
        doc: Configuration options for data collation during training (optional).
        default: {}
      - name: task
        type: str
        doc: A description of the specific task the model is being fine-tuned for.
        default: text-generation
      - name: use_cuda
        type: bool
        doc: use gpu or not
        default: true
      - name: framework
        type: str
        doc: pt ot tf
        default: pt
      - name: device_map
        type: str
        default: auto
      outputs:
      - default: ''
      lineno: 614
    evaluate:
      name: evaluate
      doc: 'Evaluating the model using perplexity, for more information visit:

        https://huggingface.co/docs/transformers/perplexity'
      parameters:
      - name: context
        doc: mlrun context
        default: ''
      - name: model_path
        doc: path to the model directory
        default: ''
      - name: data
        type: DataFrame
        doc: the data to evaluate the model
        default: ''
      - name: model_name
        type: str
        doc: name of base model
        default: null
      - name: tokenizer_name
        type: str
        doc: name of base tokenizer
        default: null
      outputs:
      - default: ''
      lineno: 768
  description: fine-tune llm model with ease
  default_handler: finetune_llm
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
