kind: job
metadata:
  name: huggingface-auto-trainer
  tag: ''
  hash: 50c8a2db162b1fb346b0bf88e92200124ec6aad1
  project: ''
  labels:
    author: Zeevr
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/ZeevRispler/functions.git#da90a20560ddedaebcfdd900a43c76d070041a61:/Users/Zeev_Rispler/PycharmProjects/functions/huggingface_auto_trainer/huggingface_auto_trainer.py
    origin_filename: /Users/Zeev_Rispler/PycharmProjects/functions/huggingface_auto_trainer/huggingface_auto_trainer.py
  entry_points:
    add_interface:
      name: add_interface
      doc: ''
      parameters:
      - name: cls
        default: ''
      - name: obj
        type: Trainer
        default: ''
      - name: restoration
        type: MLRunInterfaceRestorationType
        default: null
      outputs:
      - default: ''
      lineno: 77
    mlrun_train:
      name: mlrun_train
      doc: ''
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 87
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
        default: ''
      outputs:
      - default: ''
      lineno: 88
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 136
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 147
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: logs
        type: Dict[str, float]
        default: null
      outputs:
      - default: ''
      lineno: 158
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 184
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs:
      - default: ''
      lineno: 195
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 208
    apply_mlrun:
      name: apply_mlrun
      doc: This is temporary and will be built in mlrun 1.5.0
      parameters:
      - name: trainer
        type: Trainer
        default: ''
      - name: model_name
        type: str
        default: null
      - name: tag
        type: str
        default: ''
      - name: context
        type: MLClientCtx
        default: null
      - name: auto_log
        type: bool
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 251
    print_trainable_parameters:
      name: print_trainable_parameters
      doc: Prints the number of trainable parameters in the model.
      parameters:
      - name: model
        default: ''
      outputs:
      - default: ''
      lineno: 283
    update_config:
      name: update_config
      doc: "update configs according to user, this way the user can add/modify values\
        \ in default configs for e.g.\n\ngoes over all configs and corresponding prefixes,\
        \ collect all the keys from the given dict that start\n with the prefix and\
        \ add them to appropriate config"
      parameters:
      - name: src
        type: dict
        doc: dict of all candidate values to update dict.
        default: ''
      - name: dst
        type: dict
        doc: dict containing all configs to update.
        default: ''
      outputs:
      - default: ''
      lineno: 335
    get_class_object:
      name: get_class_object
      doc: given a full class name, this function returns the correct class
      parameters:
      - name: class_path
        type: str
        doc: a full class name (ex. 'transformers.AutoModelForCausalLM')
        default: ''
      outputs:
      - default: ''
        type: type
      lineno: 377
    set_model_and_tokenizer:
      name: set_model_and_tokenizer
      doc: get the correct model and tokenizer according to given user inputs
      parameters:
      - name: model
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing model name and class, or str with model name or path
        default: ''
      - name: tokenizer
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing tokenizer name and class, or str with tokenizer name
          or path
        default: ''
      - name: task
        type: str
        doc: a supported nlp task, used to choose model if not provided
        default: ''
      - name: framework
        type: str
        doc: pt or tf
        default: ''
      - name: lora_config
        type: dict
        doc: lora config or None, to load model in appropriate way
        default: ''
      - name: quantization_config
        type: dict
        doc: quantization config or None, to load model in appropriate way
        default: ''
      - name: use_cuda
        type: bool
        doc: use gpu or not
        default: ''
      - name: tokenizer_pretrained_config
        doc: config to load the pretrained tokenizer
        default: ''
      - name: model_pretrained_config
        doc: config to load the pretrained model
        default: ''
      - name: device_map
        type: str
        doc: a device map for model training if using number of gpu's
        default: ''
      outputs:
      - default: ''
      lineno: 390
    dataset_loader:
      name: dataset_loader
      doc: loads the specific dataset provided by the user
      parameters:
      - name: dataset
        type: str
        doc: name or path of dataset to load
        default: ''
      - name: is_train
        type: bool
        doc: bool that indicates the purpose of the dataset
        default: true
      outputs:
      - default: ''
        type: Dataset
      lineno: 498
    prepare_dataset:
      name: prepare_dataset
      doc: 'Loads the train and eval datasets (if provided) passes them through the
        tokenizer and

        returns them ready to use in training'
      parameters:
      - name: train_dataset
        type: str
        doc: the name or path to the train dataset
        default: ''
      - name: eval_dataset
        type: str
        doc: the name or path to the eval dataset
        default: ''
      - name: train_load_dataset_kwargs
        doc: kwargs for dataset loading
        default: ''
      - name: eval_load_dataset_kwargs
        doc: kwargs for dataset loading
        default: ''
      - name: tokenizer
        doc: the tokenizer to pass the data through
        default: ''
      - name: dataset_columns_to_train
        type: Union[str, list]
        doc: which columns to pass to the model as inputs (need to pass through the
          tokenizer first)
        default: ''
      outputs:
      - default: ''
      lineno: 526
    finetune_llm:
      name: finetune_llm
      doc: "Fine-tunes a Language Model (LLM) on a specific task using the provided\
        \ dataset.\n The function takes various configuration parameters to customize\
        \ the training process\n and adapt the model to specific tasks using a provided\
        \ dataset."
      parameters:
      - name: context
        type: MLClientCtx
        doc: mlrun context in order to log trained model
        default: ''
      - name: train_dataset
        type: str
        doc: The train dataset used for fine-tuning the language model.
        default: ''
      - name: eval_dataset
        type: str
        doc: The eval dataset used for evaluate the language model during training.
        default: null
      - name: train_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: eval_load_dataset_kwargs
        type: dict
        doc: kwargs for dataset loading
        default: {}
      - name: dataset_columns_to_train
        type: Union[str, list]
        doc: which columns to pass to the model as inputs
        default: text
      - name: model
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing model name and class, or str with model name or path
        default: huggingface-model
      - name: tokenizer
        type: Union[str, Tuple[str, str]]
        doc: a tuple containing tokenizer name and class, or str with tokenizer name
          or path
        default: null
      - name: deepspeed_config
        type: Union[dict, bool]
        doc: Configuration options for DeepSpeed (optional).
        default: false
      - name: quantization_config
        type: Union[dict, bool]
        doc: Configuration options for model quantization (optional).
        default: false
      - name: lora_config
        type: Union[dict, bool]
        doc: Configuration options for Low-Rank Approximation (LoRA) (optional).
        default: false
      - name: training_config
        type: dict
        doc: Configuration options specific to the fine-tuning training process (optional).
        default: {}
      - name: model_pretrained_config
        type: dict
        doc: config to load the pretrained model
        default: {}
      - name: tokenizer_pretrained_config
        type: dict
        doc: config to load the pretrained tokenizer
        default: {}
      - name: data_collator_config
        type: dict
        doc: Configuration options for data collation during training (optional).
        default: {}
      - name: task
        type: str
        doc: A description of the specific task the model is being fine-tuned for.
        default: text-generation
      - name: use_cuda
        type: bool
        doc: use gpu or not
        default: true
      - name: framework
        type: str
        doc: pt ot tf
        default: pt
      - name: device_map
        type: str
        default: auto
      outputs:
      - default: ''
      lineno: 587
    evaluate:
      name: evaluate
      doc: 'Evaluating the model using perplexity, for more information visit:

        https://huggingface.co/docs/transformers/perplexity'
      parameters:
      - name: context
        doc: mlrun context
        default: ''
      - name: model_path
        doc: path to the model directory
        default: ''
      - name: data
        type: DataFrame
        doc: the data to evaluate the model
        default: ''
      - name: model_name
        type: str
        doc: name of base model
        default: null
      - name: tokenizer_name
        type: str
        doc: name of base tokenizer
        default: null
      outputs:
      - default: ''
      lineno: 739
  description: fine-tune llm model with ease
  default_handler: finetune_llm
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
